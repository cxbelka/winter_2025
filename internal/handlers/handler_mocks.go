// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go
//
// Generated by this command:
//
//	mockgen -package handlers -source=handlers.go -destination=handler_mocks.go *
//

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	models "github.com/cxbelka/winter_2025/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockauthUsecase is a mock of authUsecase interface.
type MockauthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockauthUsecaseMockRecorder
	isgomock struct{}
}

// MockauthUsecaseMockRecorder is the mock recorder for MockauthUsecase.
type MockauthUsecaseMockRecorder struct {
	mock *MockauthUsecase
}

// NewMockauthUsecase creates a new mock instance.
func NewMockauthUsecase(ctrl *gomock.Controller) *MockauthUsecase {
	mock := &MockauthUsecase{ctrl: ctrl}
	mock.recorder = &MockauthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthUsecase) EXPECT() *MockauthUsecaseMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockauthUsecase) Authorize(ctx context.Context, rq *models.AuthReqest) (*models.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, rq)
	ret0, _ := ret[0].(*models.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockauthUsecaseMockRecorder) Authorize(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockauthUsecase)(nil).Authorize), ctx, rq)
}

// MockaccountantUsecase is a mock of accountantUsecase interface.
type MockaccountantUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockaccountantUsecaseMockRecorder
	isgomock struct{}
}

// MockaccountantUsecaseMockRecorder is the mock recorder for MockaccountantUsecase.
type MockaccountantUsecaseMockRecorder struct {
	mock *MockaccountantUsecase
}

// NewMockaccountantUsecase creates a new mock instance.
func NewMockaccountantUsecase(ctrl *gomock.Controller) *MockaccountantUsecase {
	mock := &MockaccountantUsecase{ctrl: ctrl}
	mock.recorder = &MockaccountantUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountantUsecase) EXPECT() *MockaccountantUsecaseMockRecorder {
	return m.recorder
}

// Buy mocks base method.
func (m *MockaccountantUsecase) Buy(ctx context.Context, user, item string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", ctx, user, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Buy indicates an expected call of Buy.
func (mr *MockaccountantUsecaseMockRecorder) Buy(ctx, user, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockaccountantUsecase)(nil).Buy), ctx, user, item)
}

// Info mocks base method.
func (m *MockaccountantUsecase) Info(ctx context.Context, user string) (*models.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx, user)
	ret0, _ := ret[0].(*models.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockaccountantUsecaseMockRecorder) Info(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockaccountantUsecase)(nil).Info), ctx, user)
}

// Transfer mocks base method.
func (m *MockaccountantUsecase) Transfer(ctx context.Context, from, to string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, from, to, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockaccountantUsecaseMockRecorder) Transfer(ctx, from, to, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockaccountantUsecase)(nil).Transfer), ctx, from, to, amount)
}
